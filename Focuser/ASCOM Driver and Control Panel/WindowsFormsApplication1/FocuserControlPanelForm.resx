<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEAGAAoMgAAFgAAACgAAABAAAAAgAAAAAEAGAAAAAAAAAAAAEgAAABIAAAAAAAAAAAA
        AAAJCQkFBQUFBQUHBwcGBgYEBAQGBgYJCQkEBAQKCgoFBQUDAwMEBAQGBgYEBAQNDQ0HBwcEBAQJCQkI
        CAgHBwcDAwMLCwsDAwMGBgYGBgYFBQUICAgEBAQKCgoHBwcGBgYHBwcGBgYHBwcJCQkKCgoREREGBgYF
        BQUGBgYHBwcHBwcEBAQICAgKCgoHBwcFBQUPDw8ICAgFBQUGBgYGBgYEBAQHBwcFBQUHBwcFBQUKCgoF
        BQUEBAQFBQUGBgYFBQULCwsLCwsEBAQDAwMGBgYFBQUFBQUEBAQFBQUGBgYICAgLCwsGBgYEBAQDAwMN
        DQ0JCQkICAgFBQUFBQUYGBgJCQkLCwsICAgFBQUEBAQICAgGBgYJCQkHBwcHBwcGBgYEBAQFBQUICAgL
        CwsJCQkHBwcDAwMHBwcCAgIDAwMICAgJCQkJCQkGBgYJCQkNDQ0ICAgEBAQGBgYFBQUFBQUGBgYGBgYJ
        CQkMDAwDAwMFBQUHBwcFBQUGBgYICAgGBgYGBgYGBgYGBgYFBQUICAgGBgYEBAQDAwMICAgFBQUGBgYG
        BgYEBAQHBwcEBAQICAgEBAQEBAQICAgGBgYJCQkFBQUDAwMGBgYJCQkHBwcGBgYMDAwGBgYFBQUFBQUG
        BgYEBAQMDAwJCQkODg4HBwcICAgFBQUEBAQFBQUEBAQGBgYEBAQEBAQEBAQKCgoTExMHBwcICAgGBgYO
        Dg4HBwcICAgICAgHBwcICAgGBgYGBgYFBQUGBgYGBgYICAgHBwcGBgYDAwMFBQUNDQ0dHR0GBgYFBQUI
        CAgHBwcFBQUICAgICAgGBgYJCQkDAwMGBgYGBgYFBQUICAgHBwcGBgYGBgYHBwcGBgYFBQUEBAQFBQUF
        BQUBAQEGBgYDAwMDAwMJCQkHBwcJCQkICAgICAgHBwcFBQUEBAQGBgYFBQUDAwMDAwMEBAQDAwMFBQUM
        DAwHBwcGBgYEBAQGBgYGBgYFBQUJCQkGBgYEBAQFBQUFBQUEBAQKCgoFBQUGBgYHBwcKCgoFBQUICAgK
        CgoUFBQGBgYEBAQKCgoKCgoGBgYFBQUHBwcFBQUGBgYDAwMGBgYFBQUGBgYFBQUFBQUFBQUREREICAgH
        BwcICAgEBAQICAgICAgICAgKCgoICAgGBgYICAgHBwcHBwcREREPDw8JCQkGBgYDAwMDAwMFBQUDAwMD
        AwMFBQUJCQkODg4LCwsGBgYFBQULCwsKCgoDAwMMDAwMDAwJCQkICAgHBwcFBQUEBAQICAgGBgYJCQkJ
        CQkGBgYFBQUFBQUFBQUJCQkHBwcHBwcDAwMJCQkICAgGBgYGBgYEBAQGBgYDAwMFBQUICAgJCQkEBAQG
        BgYFBQULCwsHBwcGBgYEBAQDAwMGBgYHBwcQEBAFBQUJCQkHBwcDAwMGBgYFBQUPDw8ODg4FBQUEBAQE
        BAQHBwcKCgoNDQ0FBQUDAwMJCQkICAgFBQUHBwcGBgYGBgYKCgoJCQkgICASEhIGBgYHBwcHBwcEBAQE
        BAQJCQkEBAQKCgoJCQkGBgYKCgoGBgYEBAQHBwcFBQUFBQUFBQUKCgoFBQUEBAQICAgHBwcHBwcDAwMC
        AgIGBgYHBwcFBQUGBgYHBwcEBAQODg4LCwsFBQUKCgoICAgGBgYKCgoICAgKCgoHBwcDAwMGBgYHBwcK
        CgoEBAQJCQkGBgYFBQUGBgYGBgYHBwcFBQUYGBgSEhIGBgYICAgHBwcGBgYJCQkGBgYHBwcHBwcJCQkK
        CgoGBgYICAgPDw8JCQkJCQkQEBAFBQUJCQkJCQkICAgKCgoEBAQFBQUEBAQHBwcGBgYICAgDAwMGBgYG
        BgYFBQUJCQkHBwcFBQUKCgoFBQUFBQUICAgFBQUEBAQICAgGBgYICAgICAgKCgoMDAwGBgYHBwcGBgYK
        CgoICAgDAwMFBQUODg4LCwsQEBAHBwcFBQUDAwMICAgFBQUHBwcYGBgLCwsHBwcMDAwICAgKCgoGBgYD
        AwMHBwcHBwcEBAQFBQUGBgYGBgYICAgICAgEBAQGBgYHBwcEBAQKCgoFBQUGBgYHBwcFBQUDAwMDAwMH
        BwcJCQkGBgYICAgJCQkGBgYFBQUICAgLCwsKCgoGBgYGBgYICAgFBQUHBwcGBgYGBgYGBgYJCQkFBQUH
        BwcGBgYHBwcFBQUNDQ0PDw8GBgYLCwsMDAwFBQUGBgYDAwMHBwcFBQUICAgHBwcgICAREREEBAQDAwME
        BAQEBAQFBQUFBQUGBgYHBwcHBwcKCgoHBwcFBQUGBgYFBQUFBQUEBAQDAwMICAgLCwsHBwcICAgEBAQE
        BAQDAwMFBQUGBgYCAgIFBQUFBQUFBQUFBQUGBgYFBQUEBAQFBQUKCgoICAgHBwcHBwcGBgYGBgYFBQUI
        CAgGBgYKCgoFBQUGBgYHBwcJCQkGBgYICAgKCgoJCQkTExMNDQ0BAQEKCgoFBQUKCgoFBQUDAwMKCgon
        JycQEBAGBgYEBAQGBgYFBQUGBgYGBgYICAgICAgFBQUEBAQHBwcMDAwGBgYGBgYGBgYFBQUDAwMFBQUD
        AwMHBwcEBAQCAgIFBQUDAwMEBAQFBQUFBQUEBAQEBAQGBgYICAgICAgGBgYFBQUMDAwKCgoEBAQDAwMG
        BgYNDQ0GBgYJCQkKCgoGBgYFBQULCwsODg4GBgYICAgEBAQFBQUJCQkFBQUQEBALCwsGBgYLCwsFBQUH
        BwcJCQkGBgYXFxcVFRUJCQkEBAQFBQUJCQkEBAQGBgYGBgYEBAQKCgoJCQkNDQ0MDAwFBQUEBAQKCgoH
        BwcICAgFBQUFBQUGBgYJCQkEBAQDAwMGBgYGBgYFBQUICAgJCQkFBQUDAwMGBgYKCgoGBgYGBgYDAwMH
        BwcFBQUKCgoICAgGBgYFBQUHBwcJCQkHBwcFBQUCAgINDQ0KCgoJCQkHBwcFBQUEBAQICAgHBwcWFhYJ
        CQkHBwcJCQkLCwsJCQkKCgoODg4iIiIFBQUICAgEBAQGBgYGBgYDAwMJCQkJCQkGBgYJCQkQEBAKCgoI
        CAgEBAQGBgYJCQkGBgYLCwsHBwcFBQUHBwcKCgoFBQUCAgIEBAQGBgYEBAQFBQUHBwcGBgYJCQkMDAwJ
        CQkEBAQKCgoKCgoHBwcHBwcICAgFBQUFBQUGBgYMDAwFBQUDAwMFBQUEBAQHBwcICAgJCQkEBAQGBgYG
        BgYJCQkICAgbGxsNDQ0ICAgGBgYEBAQJCQkICAgtLS0UFBQFBQUEBAQFBQUHBwcGBgYICAgFBQUEBAQH
        BwcSEhIJCQkHBwcPDw8ODg4HBwcHBwcEBAQGBgYJCQkDAwMDAwMICAgGBgYDAwMHBwcICAgFBQUFBQUJ
        CQkEBAQKCgoICAgMDAwJCQkGBgYMDAwjIyMUFBQJCQkEBAQHBwcEBAQEBAQLCwsJCQkNDQ0JCQkDAwMF
        BQUICAgGBgYHBwcGBgYICAgLCwsbGxsLCwsHBwcJCQkJCQkQEBASEhI4ODgKCgoODg4EBAQDAwMICAgG
        BgYCAgIGBgYJCQkSEhITExMGBgYGBgYGBgYGBgYEBAQFBQUEBAQFBQUDAwMFBQUHBwcJCQkEBAQJCQkH
        BwcGBgYFBQUJCQkHBwcICAgICAgLCwsGBgYKCgoGBgYGBgYmJiYQEBAODg4HBwcHBwcJCQkICAgGBgYJ
        CQkMDAwODg4ODg4KCgoEBAQFBQUFBQUGBgYKCgoMDAwVFRUICAgICAgFBQUSEhINDQ0kJCQTExMICAgI
        CAgDAwMJCQkGBgYEBAQCAgIHBwcMDAwGBgYICAgJCQkHBwcHBwcGBgYEBAQKCgoKCgoFBQUCAgIFBQUH
        BwcMDAwHBwcGBgYGBgYEBAQFBQUICAgEBAQEBAQEBAQHBwcMDAwGBgYLCwsCAgIPDw8KCgoGBgYFBQUI
        CAgGBgYICAgODg4wMDAJCQkSEhIODg4GBgYHBwcICAgHBwcHBwcICAgREREbGxsJCQkHBwcJCQkODg4c
        HBwsLCwICAgDAwMGBgYHBwcICAgICAgEBAQGBgYPDw8ICAgFBQULCwsFBQUKCgoEBAQGBgYJCQkGBgYE
        BAQEBAQFBQUEBAQDAwMICAgGBgYHBwcFBQUICAgHBwcEBAQBAQEHBwcICAgGBgYLCwsEBAQFBQUODg4I
        CAgHBwcICAgGBgYHBwcMDAwFBQUfHx8jIyMICAgICAgICAgHBwcHBwcGBgYEBAQICAgMDAwjIyMVFRUQ
        EBANDQ0LCwsMDAxHR0cTExMFBQUDAwMHBwcDAwMDAwMHBwcNDQ0MDAwGBgYHBwcDAwMICAgGBgYICAgH
        BwcFBQUFBQUFBQUEBAQDAwMFBQUGBgYGBgYICAgFBQUFBQUFBQUFBQUGBgYHBwcEBAQJCQkLCwsKCgoJ
        CQkHBwcCAgIICAgICAgGBgYGBgYICAgJCQkKCgoFBQUQEBASEhIJCQkFBQUHBwcHBwcGBgYHBwcJCQkK
        CgoHBwc1NTUREREMDAwKCgoQEBAzMzM0NDQHBwcFBQUFBQUICAgFBQUKCgoPDw8WFhYODg4EBAQGBgYE
        BAQJCQkDAwMHBwcKCgoICAgGBgYGBgYFBQUEBAQHBwcJCQkJCQkICAgFBQUGBgYFBQUDAwMEBAQICAgF
        BQUJCQkICAgGBgYHBwcICAgFBQUFBQULCwsGBgYGBgYJCQkHBwcGBgYNDQ0GBgYNDQ0FBQUFBQUJCQkJ
        CQkHBwcFBQUICAgKCgoJCQlKSkoHBwcICAgKCgokJCRdXV0XFxcFBQUICAgFBQUGBgYMDAwhISEVFRUK
        CgoFBQUHBwcGBgYEBAQLCwsGBgYKCgoGBgYGBgYICAgHBwcHBwcGBgYICAgGBgYFBQUHBwcFBQUEBAQD
        AwMFBQUODg4REREICAgREREJCQkFBQUICAgICAgICAgDAwMGBgYEBAQHBwcICAgHBwcCAgIJCQkFBQUJ
        CQkKCgoICAgODg4KCgoHBwcMDAwLCwsPDw8RERFMTEwGBgYJCQkLCwtVVVVDQ0MKCgoMDAwICAgJCQkN
        DQ0iIiIZGRkICAgJCQkLCwsFBQUHBwcCAgIFBQUEBAQFBQUFBQUKCgoFBQUDAwMHBwcICAgKCgoGBgYG
        BgYHBwcGBgYHBwcGBgYICAgGBgYHBwcHBwcJCQkICAgHBwcGBgYDAwMEBAQGBgYLCwsGBgYEBAQICAgJ
        CQkHBwcEBAQJCQkICAgFBQUICAgKCgoHBwcICAgLCwsJCQkLCwsjIyM5OTkLCwsLCwslJSWBgYESEhIK
        CgoODg4JCQkGBgY2NjYKCgoICAgGBgYEBAQHBwcHBwcICAgEBAQICAgHBwcNDQ0ODg4NDQ0FBQUFBQUH
        BwcHBwcFBQUKCgoGBgYGBgYFBQUKCgoKCgoMDAwLCwsJCQkHBwcICAgDAwMEBAQNDQ0KCgoHBwcEBAQJ
        CQkGBgYHBwcLCwsICAgEBAQEBAQHBwcKCgoMDAwKCgoICAgGBgYJCQkNDQ0QEBALCws+Pj5HR0cTExMF
        BQWEhIQ6OjoVFRUJCQkICAgdHR0rKysLCwsGBgYFBQUICAgHBwcFBQUFBQUFBQUGBgYHBwcHBwcEBAQH
        BwcQEBAFBQUEBAQCAgIFBQUDAwMHBwcJCQkGBgYFBQUGBgYFBQUHBwcLCwsFBQUDAwMJCQkEBAQGBgYJ
        CQkKCgoJCQkDAwMHBwcKCgoMDAwGBgYFBQUGBgYNDQ0JCQkGBgYKCgoHBwcMDAwQEBALCwsODg4REREH
        BwdiYmJEREQQEBA4ODiSkpIODg4ODg4JCQkgICA3NzcLCwsHBwcEBAQEBAQFBQUDAwMEBAQDAwMKCgoL
        CwsFBQUGBgYICAgGBgYFBQUDAwMJCQkGBgYGBgYJCQkFBQUKCgoJCQkGBgYEBAQJCQkKCgoHBwcDAwME
        BAQHBwcFBQUEBAQHBwcHBwcFBQUDAwMFBQUICAgICAgHBwcVFRUICAgGBgYNDQ0JCQkICAgICAgKCgoK
        CgoMDAwKCgoNDQ0VFRWEhIQuLi4TExOmpqYuLi4TExMPDw8/Pz8+Pj4MDAwGBgYHBwcGBgYHBwcHBwcF
        BQUNDQ0JCQkeHh4eHh4GBgYICAgEBAQEBAQLCwsFBQUICAgODg4FBQUFBQUGBgYGBgYEBAQFBQUMDAwG
        BgYHBwcMDAwFBQUICAgGBgYJCQkICAgHBwcGBgYGBgYGBgYGBgYJCQkICAgGBgYPDw8TExMNDQ0PDw8O
        Dg4ICAgICAgICAgKCgoREREVFRUREREeHh6Tk5MZGRlkZGSWlpYLCwsXFxdhYWFCQkIUFBQNDQ0ODg4I
        CAgICAgGBgYEBAQGBgYODg4HBwcaGhoXFxcEBAQFBQUFBQUEBAQICAgKCgoJCQkICAgHBwcJCQkFBQUG
        BgYCAgIFBQUHBwcJCQkGBgYFBQUFBQUKCgoMDAwGBgYICAgLCwsGBgYFBQUICAgODg4KCgoFBQUHBwcQ
        EBAREREVFRUWFhYSEhIJCQkNDQ0SEhIQEBATExMlJSUcHBw3NzelpaU0NDTFxcUuLi4qKip/f39MTEwN
        DQ0PDw8SEhIHBwcHBwcPDw8NDQ0MDAwLCwsICAgFBQULCwsGBgYMDAwGBgYGBgYHBwcGBgYFBQUGBgYD
        AwMFBQUJCQkFBQUHBwcFBQUKCgoPDw8GBgYHBwcHBwdYWFgYGBgICAgEBAQICAgJCQkEBAQDAwMJCQkR
        ERELCwsICAgICAgGBgYKCgoPDw8TExMdHR0oKCgYGBgMDAwVFRUcHBwyMjIuLi5eXl6vr6+ZmZmhoaFA
        QECdnZ1CQkILCwsMDAwSEhILCwsGBgYFBQUKCgoJCQkICAgICAgJCQkHBwcFBQUJCQkMDAwEBAQICAgI
        CAgJCQkLCwsKCgoEBAQEBAQJCQkNDQ0FBQUEBAQCAgIHBwcICAgFBQUPDw9tbW0JCQkFBQUDAwMGBgYG
        BgYFBQUGBgYFBQUICAgJCQkJCQkMDAwGBgYMDAwRERELCwsMDAwdHR0wMDA6OjopKSkkJCQ0NDQzMzOb
        m5vU1NTd3d2CgoLHx8c5OTkLCwsFBQURERETExMLCwsHBwcHBwcFBQUHBwcDAwMEBAQKCgoHBwcICAgF
        BQUHBwcHBwcGBgYHBwcRERENDQ0EBAQICAgICAgGBgYJCQkODg4GBgYJCQkGBgYEBAQMDAwFBQUHBwcI
        CAgGBgYFBQUFBQUJCQkEBAQFBQUFBQUDAwMDAwMEBAQHBwcHBwcMDAwLCwsJCQkJCQkTExMlJSVVVVWA
        gICCgoJ5eXmbm5vi4uL6+vrw8PDU1NQ4ODgWFhYMDAwQEBAMDAwPDw8KCgoGBgYLCwsFBQUHBwcHBwcF
        BQUHBwcGBgYHBwcJCQkLCwsMDAwHBwcFBQUGBgYGBgYHBwcHBwcGBgYHBwcFBQUKCgoGBgYFBQUHBwcF
        BQUHBwcDAwMGBgYFBQULCwsLCwsGBgYHBwcFBQUEBAQFBQUHBwcFBQUGBgYNDQ0ICAgEBAQeHh4MDAwN
        DQ0QEBASEhIWFhZZWVm4uLjq6urx8fH+/v7////l5eVeXl40NDQSEhIPDw8VFRUNDQ0JCQkMDAwKCgoL
        CwsICAgJCQkEBAQGBgYFBQUGBgYFBQUJCQkICAgDAwMEBAQFBQUGBgYFBQUPDw8EBAQGBgYEBAQFBQUG
        BgYICAgDAwMLCwsHBwcGBgYDAwMHBwcDAwMJCQkJCQkHBwcFBQUEBAQDAwMFBQUGBgYGBgYHBwcFBQUK
        CgoKCgoNDQ0HBwcMDAwTExMTExMfHx81NTVvb2/h4eH9/f3+/v79/f27u7scHBwLCwsJCQkEBAQLCwsJ
        CQkFBQUDAwMGBgYHBwcFBQUGBgYICAgLCwsFBQUNDQ0MDAwFBQULCwsGBgYGBgYDAwMHBwcHBwcHBwcD
        AwMJCQkFBQUGBgYHBwcEBAQHBwcHBwcHBwcHBwcFBQUKCgoEBAQGBgYFBQUKCgoGBgYICAgHBwcGBgYG
        BgYHBwcJCQkHBwcMDAwICAgODg4JCQkLCwsHBwcSEhIVFRUnJydmZmbT09P9/f3+/v7+/v7Y2Ng8PDwR
        EREPDw8JCQkKCgoHBwcICAgHBwcMDAwICAgKCgoLCwsKCgoMDAwLCwsVFRUGBgYEBAQICAgICAgFBQUF
        BQUHBwcEBAQHBwcgICALCwsFBQUGBgYEBAQFBQUFBQUGBgYKCgoHBwcHBwcJCQkDAwMFBQUKCgoLCwsF
        BQUGBgYICAgHBwcGBgYHBwcFBQUFBQUGBgYLCwsKCgoNDQ0SEhIXFxcYGBgaGhomJiaCgoLy8vL9/f35
        +fnf39/T09OxsbFeXl4gICAbGxsPDw8FBQUHBwcICAgGBgYJCQkICAgICAgGBgYKCgoGBgYJCQkFBQUH
        BwcDAwMJCQkICAgICAgICAgMDAwLCwsREREGBgYEBAQEBAQHBwcEBAQEBAQKCgoICAgLCwsQEBAICAgE
        BAQLCwsFBQUFBQUHBwcFBQUCAgIGBgYGBgYEBAQFBQUHBwcICAgMDAwPDw8ICAgLCwsLCwsUFBQhISFn
        Z2fKysrV1dX4+PjT09OKiophYWFZWVl1dXVWVlYiIiITExMJCQkLCwsODg4GBgYLCwsICAgGBgYHBwcI
        CAgHBwcEBAQGBgYGBgYICAgFBQUGBgYHBwcEBAQGBgYFBQUGBgYEBAQEBAQCAgIGBgYFBQUEBAQDAwMJ
        CQkcHBwDAwMJCQkFBQUICAgGBgYGBgYJCQkHBwcDAwMICAgFBQUFBQUHBwcFBQUFBQUKCgoMDAwLCwsO
        Dg4SEhIdHR1paWm4uLhLS0vk5OTIyMiVlZVBQUEiIiIdHR0dHR0pKSkyMjIiIiIPDw8LCwsKCgoICAgH
        BwcDAwMICAgICAgHBwcICAgLCwsFBQUKCgoICAgJCQkFBQUHBwcFBQUHBwcFBQUGBgYHBwcICAgKCgoO
        Dg4HBwcHBwcGBgYGBgYKCgoJCQkCAgIEBAQGBgYDAwMGBgYKCgoLCwsJCQkVFRUGBgYFBQUICAgGBgYI
        CAgICAgJCQkICAgHBwcKCgpgYGCEhIQbGxuZmZmQkJC+vr5JSUkvLy8fHx8XFxchISEYGBgMDAwcHBwd
        HR0QEBAMDAwHBwcFBQUDAwMICAgLCwsGBgYFBQUEBAQICAgKCgoDAwMFBQUICAgLCwsFBQUGBgYFBQUG
        BgYHBwcFBQUGBgYGBgYFBQUGBgYICAgGBgYJCQkMDAwFBQUHBwcODg4JCQkKCgoLCwsICAgGBgYQEBAI
        CAgFBQUGBgYGBgYLCwsHBwcMDAwICAgUFBRmZmZdXV0QEBAtLS3T09MsLCywsLAtLS0ZGRkXFxcaGhoS
        EhIODg4JCQkICAgLCwsSEhIbGxsLCwsICAgHBwcFBQUFBQUFBQUODg4ICAgHBwcEBAQLCwsKCgoFBQUF
        BQUICAgKCgoLCwsJCQkICAgJCQkLCwsGBgYGBgYFBQUHBwcEBAQICAgLCwsFBQUFBQUFBQUICAgICAgE
        BAQFBQULCwsEBAQJCQkHBwcNDQ0KCgoHBwcMDAwKCgoUFBRVVVU5OTkLCwsPDw+UlJRhYWEaGhqSkpIc
        HBwQEBAYGBgPDw8ODg4KCgoMDAwKCgoHBwcKCgoNDQ0JCQkJCQkMDAwGBgYFBQUHBwcGBgYLCwsKCgoK
        CgoGBgYICAgGBgYEBAQGBgYHBwcGBgYICAgHBwcFBQUJCQkHBwcHBwcHBwcICAgICAgJCQkLCwsLCwsE
        BAQEBAQFBQUICAgHBwcDAwMHBwcHBwcKCgoFBQUKCgoKCgoGBgYKCgoUFBRLS0svLy8PDw8KCgo3Nzev
        r68JCQkxMTFtbW0PDw8PDw8PDw8LCwsRERESEhITExMNDQ0MDAwFBQUJCQkFBQUJCQkREREKCgoJCQkI
        CAgFBQUJCQkFBQUFBQUQEBALCwsFBQUFBQUGBgYMDAwFBQUGBgYGBgYFBQUHBwcICAgHBwcHBwcFBQUI
        CAgICAgGBgYHBwcEBAQGBgYHBwcJCQkKCgoFBQUJCQkJCQkHBwcHBwcDAwMJCQkJCQkWFhYwMDAcHBwL
        CwsHBwcPDw+Hh4dGRkYPDw9AQEBSUlIPDw8PDw8MDAwICAgJCQkGBgYQEBAKCgoQEBAICAgKCgoGBgYF
        BQUKCgoKCgoJCQkGBgYICAgEBAQMDAwMDAwEBAQGBgYICAgMDAwGBgYICAgEBAQFBQUFBQUHBwcFBQUF
        BQUHBwcHBwcDAwMFBQUICAgICAgJCQkGBgYKCgoHBwcFBQUODg4EBAQGBgYHBwcNDQ0EBAQDAwMJCQkV
        FRUvLy8TExMLCwsHBwcICAg4ODh7e3sJCQkKCgpHR0ctLS0SEhIQEBAODg4GBgYICAgKCgoKCgoICAgF
        BQUICAgQEBAJCQkEBAQEBAQFBQUDAwMHBwcHBwcICAgICAgICAgMDAwHBwcEBAQMDAwDAwMICAgHBwcH
        BwcJCQkFBQUGBgYICAgLCwsGBgYHBwcFBQUGBgYICAgGBgYICAgEBAQFBQUICAgICAgGBgYNDQ0JCQkI
        CAgGBgYHBwcbGxskJCQHBwcICAgHBwcJCQkUFBR2dnYuLi4HBwcICAg8PDwSEhIODg4ODg4ICAgHBwcH
        BwcLCwsICAgHBwcLCwsICAgICAgKCgoREREKCgoPDw8ICAgJCQkFBQUFBQUKCgoICAgFBQUEBAQFBQUC
        AgIGBgYFBQUICAgGBgYICAgJCQkEBAQHBwcLCwsDAwMICAgKCgoGBgYBAQEGBgYDAwMFBQUFBQUDAwMF
        BQUFBQUJCQkHBwcHBwcHBwcVFRUdHR0NDQ0KCgoICAgFBQUCAgI7OztZWVkHBwcDAwMHBwdDQ0MKCgoE
        BAQKCgoGBgYKCgoFBQUHBwcICAgFBQUGBgYGBgYMDAwLCwsHBwcXFxcHBwcICAgGBgYEBAQDAwMHBwcE
        BAQGBgYHBwcLCwsDAwMGBgYHBwcFBQUICAgHBwcJCQkICAgGBgYODg4FBQUDAwMEBAQHBwcEBAQJCQkJ
        CQkICAgGBgYKCgoJCQkHBwcEBAQEBAQHBwckJCQQEBALCwsEBAQDAwMHBwcJCQkVFRVdXV0XFxcNDQ0J
        CQkHBwdFRUUUFBQMDAwFBQUGBgYDAwMJCQkKCgoEBAQHBwcHBwcHBwcLCwsHBwdCQkKUlJQNDQ0JCQkJ
        CQkGBgYFBQULCwsGBgYFBQUDAwMEBAQEBAQGBgYEBAQ9PT0XFxcKCgoBAQELCwsHBwcJCQkEBAQODg4G
        BgYFBQUHBwcGBgYHBwcFBQUGBgYLCwsFBQUICAgDAwMJCQkVFRULCwsODg4HBwcJCQkGBgYLCwsHBwc3
        NzcqKioGBgYLCwsTExMKCgowMDAGBgYKCgoFBQULCwsLCwsJCQkHBwcFBQUICAgICAgPDw8MDAwZGRkv
        Ly83NzcMDAwHBwcNDQ0ICAgHBwcFBQUGBgYEBAQEBAQPDw8JCQkHBwcLCwtWVlYODg4HBwcHBwcEBAQG
        BgYGBgYGBgYODg4GBgYGBgYHBwcGBgYGBgYEBAQREREODg4ICAgFBQUNDQ0REREKCgoPDw8HBwcGBgYG
        BgYKCgoLCwsdHR1EREQLCwsJCQkHBwcGBgYVFRUuLi4KCgoMDAwHBwcICAgICAgFBQUEBAQEBAQLCwsF
        BQUUFBQnJycICAgGBgYNDQ0ODg4LCwsEBAQFBQUEBAQLCwsGBgYLCwsLCwsHBwcGBgYGBgYHBwcLCwsJ
        CQkFBQUICAgGBgYKCgoFBQUJCQkFBQUICAgICAgICAgFBQUFBQUFBQUKCgoHBwcKCgoMDAwNDQ0LCwsI
        CAgNDQ0KCgoHBwcHBwcKCgoNDQ09PT0fHx8FBQUODg4KCgoFBQUcHBwSEhIFBQUICAgKCgoHBwcFBQUJ
        CQkFBQUEBAQICAgGBgYGBgYKCgoQEBADAwMREREICAgHBwcEBAQKCgoMDAwODg4HBwcFBQUODg4HBwcF
        BQUGBgYICAgJCQkGBgYICAgEBAQGBgYKCgoGBgYODg4MDAwHBwcFBQUGBgYDAwMFBQUJCQkHBwcGBgYJ
        CQkPDw8KCgoJCQkODg4MDAwKCgoGBgYEBAQKCgoXFxc+Pj4SEhIGBgYSEhINDQ0ICAgiIiILCwsKCgoK
        CgoHBwcICAgJCQkGBgYICAgGBgYICAgNDQ0ICAgKCgoJCQkGBgYKCgoLCwsKCgoEBAQDAwMFBQUKCgoF
        BQUHBwcICAgFBQUKCgoJCQkGBgYMDAwGBgYODg4KCgoGBgYICAgEBAQFBQUKCgoHBwcGBgYJCQkEBAQF
        BQUHBwcICAgODg4JCQkICAgDAwMDAwMJCQkGBgYFBQUFBQUFBQUPDw8sLCwPDw8HBwcFBQUICAgHBwcH
        BwcbGxsJCQkFBQUJCQkKCgoMDAwJCQkCAgIGBgYEBAQGBgYJCQkLCwsKCgoKCgoGBgYHBwcHBwcICAgK
        CgoHBwcHBwcODg4EBAQGBgYICAgICAgGBgYEBAQICAgKCgoEBAQHBwcKCgoHBwcFBQUCAgIGBgYHBwcG
        BgYEBAQICAgEBAQJCQkHBwcHBwcICAgEBAQHBwcGBgYFBQULCwsGBgYEBAQFBQUICAgYGBgnJycHBwcL
        CwsFBQUGBgYJCQkODg4XFxcKCgoKCgoMDAwHBwcICAgEBAQFBQUEBAQHBwcJCQkDAwMGBgYJCQkODg4H
        BwcICAgDAwMDAwMJCQkHBwcGBgYFBQUICAgJCQkHBwcFBQUGBgYHBwcEBAQCAgIHBwcGBgYEBAQHBwcG
        BgYICAg+Pj4REREKCgoLCwsKCgoHBwcFBQUPDw8HBwcGBgYEBAQGBgYHBwcGBgYICAgEBAQDAwMHBwcL
        CwsqKioREREGBgYEBAQGBgYGBgYFBQUKCgoTExMHBwcGBgYICAgHBwcHBwcEBAQHBwcJCQkGBgYHBwcF
        BQUMDAwKCgoFBQUKCgoDAwMHBwcFBQUEBAQDAwMDAwMEBAQJCQkHBwcICAgFBQUGBgYICAgICAgGBgYF
        BQUEBAQEBAQICAgLCwsGBgYfHx8HBwcGBgYFBQUEBAQDAwMJCQkJCQkGBgYGBgYJCQkICAgFBQUICAgF
        BQUKCgoEBAQFBQUSEhIYGBgJCQkEBAQJCQkDAwMEBAQHBwcQEBATExMMDAwMDAwICAgGBgYDAwMFBQUF
        BQUEBAQDAwMHBwcGBgYHBwcKCgoNDQ0NDQ0EBAQJCQkICAgKCgoJCQkICAgFBQULCwsMDAwHBwcICAgI
        CAgHBwcFBQUGBgYEBAQDAwMDAwMHBwcFBQUJCQkEBAQNDQ0LCwsGBgYGBgYGBgYMDAwEBAQJCQkICAgH
        BwcKCgoFBQUPDw8JCQkKCgoJCQkICAgaGhoHBwcGBgYGBgYJCQkFBQUGBgYHBwcQEBALCwsMDAwMDAwJ
        CQkKCgoGBgYKCgoFBQUEBAQHBwcGBgYHBwcEBAQGBgYFBQUICAgKCgoFBQUEBAQHBwcHBwcFBQUJCQkI
        CAgNDQ0HBwcEBAQEBAQEBAQFBQUGBgYEBAQEBAQGBgYGBgYICAgJCQkPDw8JCQkLCwsJCQkICAgDAwME
        BAQHBwcLCwsGBgYFBQUGBgYFBQUHBwcHBwcFBQUJCQkWFhYXFxcMDAwHBwcMDAwEBAQGBgYEBAQFBQUR
        ERENDQ0KCgoFBQUGBgYLCwsGBgYGBgYEBAQJCQkGBgYDAwMGBgYEBAQGBgYHBwcGBgYJCQkGBgYFBQUG
        BgYGBgYEBAQGBgYHBwcGBgYFBQUGBgYFBQUEBAQFBQUGBgYGBgYICAgHBwcEBAQDAwMFBQUHBwcGBgYO
        Dg4KCgoJCQkGBgYGBgYFBQUGBgYEBAQEBAQEBAQGBgYICAgFBQUGBgYJCQkYGBgICAgHBwcNDQ0FBQUD
        AwMGBgYDAwMHBwcTExMQEBAHBwcGBgYKCgoLCwsFBQUDAwMGBgYFBQUKCgoFBQUJCQkHBwcGBgYICAgE
        BAQJCQkICAgGBgYDAwMHBwcFBQUEBAQFBQUGBgYEBAQGBgYICAgGBgYICAgEBAQEBAQJCQkKCgoGBgYH
        BwcICAgDAwMHBwcKCgoFBQUICAgFBQUJCQkGBgYEBAQICAgHBwcLCwsEBAQKCgoHBwcCAgIjIyMzMzMH
        BwcEBAQKCgoKCgoICAgGBgYEBAQGBgYMDAwICAgFBQUFBQUEBAQICAgFBQUEBAQDAwMKCgoLCwsGBgYI
        CAgHBwcGBgYHBwcJCQkJCQkHBwcGBgYDAwMEBAQCAgIFBQUFBQULCwsHBwcGBgYKCgoEBAQEBAQFBQUD
        AwMICAgMDAwJCQkJCQkGBgYDAwMGBgYLCwsHBwcICAgEBAQEBAQGBgYDAwMGBgYGBgYEBAQICAgCAgIH
        BwcHBwcaGhohISEMDAwFBQUEBAQFBQUFBQUHBwcGBgYJCQkJCQkFBQUFBQULCwsLCwsFBQUEBAQFBQUC
        AgIKCgoLCwsDAwMLCwsGBgYEBAQHBwcNDQ0JCQkICAgGBgYGBgYICAgFBQUFBQUFBQUKCgoICAgDAwMI
        CAgGBgYICAgHBwcFBQUFBQUGBgYQEBAGBgYEBAQLCwsCAgIEBAQHBwcKCgoFBQUHBwcKCgoEBAQLCwsM
        DAwHBwcDAwMFBQUEBAQNDQ0GBgYHBwcHBwcHBwcHBwcMDAwMDAwNDQ0ICAgPDw8NDQ0EBAQDAwMGBgYI
        CAgICAgFBQUFBQUDAwMFBQUHBwcKCgoLCwsFBQUJCQkEBAQGBgYGBgYLCwsEBAQFBQUFBQUCAgIEBAQF
        BQUFBQUHBwcFBQUHBwcMDAwQEBAHBwcEBAQGBgYICAgGBgYGBgYFBQUQEBAODg4EBAQMDAwGBgYDAwMJ
        CQkEBAQJCQkGBgYHBwcKCgoFBQUDAwMWFhYUFBQGBgYHBwcGBgYHBwcMDAxYWFgQEBAGBgYKCgoICAgK
        CgoHBwcMDAwMDAwICAgGBgYHBwcKCgoLCwsHBwcGBgYLCwsICAgHBwcFBQULCwsHBwcEBAQJCQkEBAQH
        BwcHBwcDAwMFBQUICAgDAwMHBwcICAgHBwcHBwcGBgYEBAQHBwcEBAQHBwcICAgKCgoKCgoGBgYDAwMF
        BQUEBAQGBgYDAwMEBAQHBwcDAwMFBQUFBQUMDAwHBwcGBgYREREHBwcEBAQGBgYGBgYICAgKCgo/Pz8K
        CgoEBAQDAwMHBwcHBwcFBQUFBQUHBwcMDAwGBgYHBwcEBAQEBAQFBQUCAgIGBgYEBAQGBgYGBgYKCgoH
        BwcEBAQGBgYCAgIDAwMBAQEDAwMJCQkCAgIGBgYFBQUFBQUEBAQDAwMFBQUGBgYLCwsFBQUHBwcEBAQK
        CgoICAgEBAQEBAQGBgYDAwMGBgYDAwMCAgILCwsEBAQEBAQEBAQEBAQGBgYKCgoICAgFBQUEBAQGBgYF
        BQUJCQkGBgYICAgICAgFBQUICAgJCQkGBgYFBQUEBAQFBQUHBwcHBwcICAgDAwMCAgIFBQUDAwMGBgYN
        DQ0KCgoCAgIEBAQEBAQGBgYLCwsGBgYGBgYJCQkHBwcICAgEBAQHBwcICAgKCgoEBAQEBAQGBgYICAgH
        BwcFBQUKCgoGBgYEBAQICAgDAwMHBwcHBwcGBgYGBgYFBQUHBwcFBQUFBQUDAwMFBQUFBQUMDAwQEBAH
        BwcMDAwGBgYGBgYGBgYNDQ0DAwMFBQULCwsFBQUGBgYKCgoFBQUFBQUEBAQEBAQHBwcJCQkICAgGBgYG
        BgYGBgYDAwMHBwcGBgYFBQUDAwMICAgFBQUEBAQLCwsICAgEBAQDAwMDAwMGBgYHBwcEBAQICAgPDw8G
        BgYFBQUHBwcFBQUGBgYFBQUEBAQGBgYKCgoMDAwFBQUICAgHBwcICAgHBwcFBQULCwsREREGBgYEBAQG
        BgYFBQULCwsICAgHBwcFBQUFBQUICAgHBwcICAgICAgHBwcGBgYICAgFBQUJCQkICAgHBwcHBwcDAwMD
        AwMSEhIMDAwEBAQGBgYJCQkGBgYHBwcDAwMGBgYGBgYLCwsDAwMEBAQPDw8ICAgDAwMGBgYKCgoGBgYH
        BwcFBQUGBgYICAgGBgYEBAQGBgYEBAQJCQkEBAQDAwMHBwcICAgODg4HBwcICAgHBwcCAgIEBAQEBAQL
        CwsGBgYHBwcHBwcEBAQJCQkLCwsKCgoMDAwHBwcFBQUJCQkODg4MDAwHBwcHBwcGBgYICAgHBwcGBgYD
        AwMFBQUGBgYHBwcLCwsVFRUGBgYEBAQFBQUGBgYEBAQEBAQEBAQLCwsKCgoDAwMHBwcLCwsEBAQJCQkK
        CgoICAgKCgoICAgDAwMHBwcFBQUEBAQJCQkCAgIDAwMGBgYJCQkGBgYGBgYEBAQEBAQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>